<#
.SYNOPSIS
    Installs, upgrades, and configures rke2 on a windows node

.NOTES
    Optional Environment Variables:
      - $env:WINS_RESTART_STAMP
        - A hash generated by Rancher representing the current configuration of the node plan and control plane
      - $env:RKE2_DATA_DIR
        - The directory where rke2 should be installed. This must be a valid Windows path. Defaults to c:/var/lib/rancher/rke2
      - $env:INSTALL_RKE2_VERSION
        - The version of rke2 that the cluster is running on. This is a string value in the format of vX.Y.Z+rke2rW
        - If this is not provided, the install script will always stop and reinstall rke2

#>

$ErrorActionPreference = 'Stop'
Set-StrictMode -Version Latest

function Get-StringHash {
    [CmdletBinding()]
    param (
        [Parameter()]
        [string]
        $Value
    )
    $stringAsStream = [System.IO.MemoryStream]::new()
    $writer = [System.IO.StreamWriter]::new($stringAsStream)
    $writer.write($Value)
    $writer.Flush()
    $stringAsStream.Position = 0
    return (Get-FileHash -InputStream $stringAsStream -Algorithm SHA256).Hash.ToLower()
}

function Write-LogInfo {
    $ts = (Get-Date).ToString("hh:mm:ss.fff")
    Write-Host -NoNewline -ForegroundColor Blue "[INFO $ts] "
    Write-Host -ForegroundColor Gray ("{0,-44}" -f ($args -join " "))
}

function Write-LogWarn {
    $ts = (Get-Date).ToString("hh:mm:ss.fff")
    Write-Host -NoNewline -ForegroundColor DarkYellow "[WARN $ts] "
    Write-Host -ForegroundColor Gray ("{0,-44}" -f ($args -join " "))
}

function Write-LogError {
    $ts = (Get-Date).ToString("hh:mm:ss.fff")
    Write-Host -NoNewline -ForegroundColor DarkRed "[ERRO $ts] "
    Write-Host -ForegroundColor Gray ("{0,-44}" -f ($args -join " "))
}

function Write-LogFatal {
    $ts = (Get-Date).ToString("hh:mm:ss.fff")
    Write-Host -NoNewline -ForegroundColor DarkRed "[FATA $ts] "
    Write-Host -ForegroundColor Gray ("{0,-44}" -f ($args -join " "))

    exit 255
}

function New-Directory {
    [CmdletBinding()]
    param (
        [Parameter()]
        [string]
        $Path
    )
    if (-not (Test-Path -Path $Path)) {
        New-Item -Path $Path -ItemType Directory | Out-Null
    }
}

function Get-CurrentEnvHash {
    [CmdletBinding()]
    param (
        [Parameter()]
        [string]
        $rke2ServiceName
    )
    try
    {
        $currentEnv = Get-ItemProperty HKLM:SYSTEM\CurrentControlSet\Services\$rke2ServiceName -ErrorAction SilentlyContinue
        if ($null -eq $currentEnv)
        {
            # either no environment variables have been set, or rke2 hasn't been installed
            return ""
        }
        $envString = ($currentEnv).Environment | Out-String
        return Get-StringHash -Value ($envString)
    } catch {
        return ""
    }
}

function Determine-Upgrading {
    $CURRENT_RKE2_VERSION = ""
    try
    {
        $RKE2_VERSION_OUTPUT = $(c:\usr\local\bin\rke2.exe --version)
        if ($RKE2_VERSION_OUTPUT -eq "") {
            Write-LogInfo "Could not determine current rke2 version as 'rke2 --version' did not return the expected content"
            return $true
        }

        $CURRENT_RKE2_VERSION = $($RKE2_VERSION_OUTPUT.Split(" ") -Like "v1.*")
        Write-LogInfo "Detected $rke2ServiceName version $CURRENT_RKE2_VERSION"
    } catch {
        Write-LogInfo "Could not determine current $rke2ServiceName version"
        return $true
    }

    # INSTALL_RKE2_VERSION denotes the version of rke2 that we are
    # upgrading towards. This comes from the v1 cluster object,
    # and is not provided when deploying clusters from rancher versions < v2.10.
    $INCOMING_RKE2_VERSION = $env:INSTALL_RKE2_VERSION
    if ((-not $INCOMING_RKE2_VERSION) -or ($INCOMING_RKE2_VERSION -eq "")) {
        Write-LogWarn "`$env:INSTALL_RKE2_VERSION was empty, cannot determine if we are upgrading"
        return $true
    } else {
        Write-LogInfo "Given plan specifies $rke2ServiceName version $INCOMING_RKE2_VERSION"
    }

    # If we can't find the current version, we assume it's not installed. If the incoming and existing versions do not match,
    # we must be upgrading so we need to stop rke2 and re-run the install script. When executed by older versions of Rancher which do not provide
    # CATTLE_INCOMING_RKE2_VERSION, the service will always be stopped and reinstalled, which is the long standing behavior.
    if ((-not $CURRENT_RKE2_VERSION) -or ($CURRENT_RKE2_VERSION -ne $INCOMING_RKE2_VERSION)) {
        Write-LogInfo "'$INCOMING_RKE2_VERSION' does not match '$CURRENT_RKE2_VERSION'. Will upgrade $rke2ServiceName version"
        return $true
    }
    return $false
}

function Stop-RKE2 {
    Stop-Service -Name $rke2ServiceName
    while ((Get-Service $rke2ServiceName).Status -ne 'Stopped')
    {
        Write-LogInfo "Waiting for $rke2ServiceName agent service to stop"
        Start-Sleep -s 5
    }
    Write-LogInfo "$rke2ServiceName agent service has stopped"

    # Ensure the binary has exited
    while (Get-Process -Name rke2 -ErrorAction SilentlyContinue) {
        Write-LogInfo "Waiting for $rke2ServiceName agent process to stop"
        Start-Sleep -s 5
    }
    Write-LogInfo "$rke2ServiceName agent process has exited"
}

function Configure-DelayedServiceStartType {
    [CmdletBinding()]
    param (
        [Parameter()]
        [string]
        $ServiceName
    )

    $startType = (sc.exe qc $ServiceName | Select-String "START_TYPE" | ForEach-Object { ($_ -replace '\s+', ' ').trim().Split(" ") | Select-Object -Last 1 })
    if (-Not $startType) {
        Write-LogError "could not determine current $ServiceName service start type, will not attempt to reconfigure start type"
        return
    }

    if ($startType -and ($startType -ne "(DELAYED)")) {
        Write-LogInfo "Changing $ServiceName service start type to 'Automatic (Delayed)'"
        sc.exe config $serviceName start= delayed-auto
    } else {
        Write-LogInfo "$ServiceName is already configured with a start type of 'Automatic (Delayed)'"
    }
}

$rke2ServiceName = "rke2"
$SA_INSTALL_PREFIX = if($env:SA_INSTALL_PREFIX) { $env:SA_INSTALL_PREFIX } else { "c:/usr/local" }
$RKE2_DATA_DIR = if ($env:RKE2_DATA_DIR) { $env:RKE2_DATA_DIR } else { "c:/var/lib/rancher/rke2" };
$SAI_FILE_DIR = "$RKE2_DATA_DIR/system-agent-installer"
$RESTART_STAMP_FILE = "$SAI_FILE_DIR/rke2_restart_stamp"
$PRIOR_RESTART_STAMP = ""

New-Directory -Path "$RKE2_DATA_DIR"
New-Directory -Path "$SAI_FILE_DIR"

if (Test-Path $RESTART_STAMP_FILE) {
    $PRIOR_RESTART_STAMP = Get-Content -Path $RESTART_STAMP_FILE
}

# RESTART denotes whether we should restart the rke2
# service. This needs to be done during an upgrade, or if
# environment variables change.
$RESTART = $false
$MISMATCHED_RESTART_STAMPS = $false
if ($env:WINS_RESTART_STAMP)
{
    if ($PRIOR_RESTART_STAMP -ne $env:WINS_RESTART_STAMP) {
        Write-LogInfo "Detected new Restart Stamp (old stamp: [$PRIOR_RESTART_STAMP], new stamp: [$env:WINS_RESTART_STAMP])"
        $RESTART = $true
        $MISMATCHED_RESTART_STAMPS = $true
    } else {
        Write-LogInfo "Restart stamps match ($env:WINS_RESTART_STAMP)"
    }
} else {
    Write-LogWarn("`$env:WINS_RESTART_STAMP was not provided, cannot update restart stamp file")
}

# Check if any environment variables have changed. We need to restart the service if they have
$currentEnvHash = Get-CurrentEnvHash -rke2ServiceName $rke2ServiceName

# Build a string array of environment variables to be set in the registry for the rke2 service
$newEnv = @()
$RKE2_ENV = Get-ChildItem env: | Where-Object { $_.Name -Like "RKE2_*" } | ForEach-Object { "$($_.Name)=$($_.Value)" }
if ($RKE2_ENV) {
    $newEnv += $RKE2_ENV
}

$PROXY_ENV_INFO = Get-ChildItem env: | Where-Object { $_.Name -Match "^(NO|HTTP|HTTPS)_PROXY" } | ForEach-Object { "$($_.Name)=$($_.Value)" }
if ($PROXY_ENV_INFO) {
    $newEnv += $PROXY_ENV_INFO
}

$newEnvHash = Get-StringHash -Value $($newEnv | Out-String)
if ($newEnv -and ($newEnvHash -ne $currentEnvHash)) {
    if (Test-Path -Path HKLM:SYSTEM\CurrentControlSet\Services\$rke2ServiceName) {
        # In the event that no environment variables were specified during the initial rke2 installation, the 'Environment' property
        # will not yet exist in the registry.
        if (-Not (Get-ItemProperty HKLM:SYSTEM\CurrentControlSet\Services\$rke2ServiceName -Name Environment -ErrorAction Ignore)){
            Write-Host "$rke2ServiceName Environment registry property not found, adding now"
            New-ItemProperty HKLM:SYSTEM\CurrentControlSet\Services\$rke2ServiceName -Name Environment -PropertyType MultiString -Value $newEnv
        }  else {
            Write-Host "updating existing $rke2ServiceName Environment registry property"
            Set-ItemProperty HKLM:SYSTEM\CurrentControlSet\Services\$rke2ServiceName -Name Environment -Value $newEnv
        }
    }
    else {
        New-Item HKLM:SYSTEM\CurrentControlSet\Services\$rke2ServiceName
        New-ItemProperty HKLM:SYSTEM\CurrentControlSet\Services\$rke2ServiceName -Name Environment -PropertyType MultiString -Value $newEnv
    }
    $RESTART = $true
    Write-LogInfo "Detected updated environment variable hash. Previous hash: $currentEnvHash, new hash: $newEnvHash. Will restart the $rke2ServiceName service as needed"
}

# If the user has removed all environnment variables from the cluster configuration,
# we need to ensure we do not leave the old ones in the registry
if ((-Not $newEnv) -or ($null -eq $newEnv)) {
    Write-LogInfo "No $rke2ServiceName environment variables have been provided"
    if(Get-ItemProperty HKLM:SYSTEM\CurrentControlSet\Services\$rke2ServiceName -Name Environment -ErrorAction Ignore)
    {
        Write-LogInfo "Clearing existing $rke2ServiceName environment variables"
        Remove-ItemProperty HKLM:SYSTEM\CurrentControlSet\Services\$rke2ServiceName -Name Environment
        $RESTART = $true
    } else {
        Write-LogInfo "No $rke2ServiceName environment variables have been set in the registry"
    }
}

$UPGRADING_VERSION=(Determine-Upgrading)
$SERVICE_EXISTS = ($null -ne (Get-Service -Name $rke2ServiceName -ErrorAction Ignore))
Write-LogInfo "Restart: [$RESTART], Upgrading Version: [$UPGRADING_VERSION], Service Exists: [$SERVICE_EXISTS]"
if (($RESTART -or $UPGRADING_VERSION) -and ($SERVICE_EXISTS))
{
    Write-LogInfo "$rke2ServiceName agent service found, stopping now"
    Stop-RKE2
}

if (($UPGRADING_VERSION -eq $true) -or ($SERVICE_EXISTS -eq $false))
{
    Write-LogInfo "Executing the $rke2ServiceName Install Script"
    ./installer.ps1 -TarPrefix $SA_INSTALL_PREFIX  -ArtifactPath $env:CATTLE_AGENT_EXECUTION_PWD
} else {
    Write-LogInfo "Skipping $rke2ServiceName install script as the service already exists and we are not upgrading"
}

if ($MISMATCHED_RESTART_STAMPS -eq $true) {
    Write-LogInfo "Detected mismatched restart hashes. Updating the restart hash file with value [$env:WINS_RESTART_STAMP]"
    Set-Content -Path $RESTART_STAMP_FILE -Value $env:WINS_RESTART_STAMP
}

if ($env:INSTALL_RKE2_SKIP_ENABLE -eq $true) {
    Write-LogInfo "Skipping $rke2ServiceName Service installation"
    exit 0
}

if (-not $SERVICE_EXISTS) {
    # Create Windows Service
    Write-LogInfo "RKE2 agent service not found, enabling agent service"
    Push-Location c:\usr\local\bin
    rke2.exe agent service --add
    Pop-Location
}

# ensure rke2 service uses a delayed start type
Configure-DelayedServiceStartType -ServiceName $rke2ServiceName

if ($env:INSTALL_RKE2_SKIP_START -and ($env:INSTALL_RKE2_SKIP_START -eq $true)) {
    Write-LogInfo "Skipping starting of the $rke2ServiceName Service"
    exit 0
}

if ((Get-Service $rke2ServiceName).Status -eq 'Stopped') {
    Write-LogInfo "Starting the $rke2ServiceName agent service"
    try
    {
        Start-Service -Name $rke2ServiceName
    } catch {
        Write-LogError "Failed to start $rke2ServiceName"
        Write-LogError "Run the following command to export the RKE2 service logs: Get-EventLog -LogName Application -Source rke2 | Select-Object timewritten,replacementstrings | Format-Table -Wrap | Out-File rke2-logs.txt"
        throw
    }
    Write-LogInfo "Successfully started the $rke2ServiceName service"
} elseif (($RESTART -eq $true) -and ((Get-Service $rke2ServiceName).Status -eq 'Running')) {
    Write-LogInfo "Restarting $rke2ServiceName` (RESTART: [$RESTART], UPGRADING_VERSION [$UPGRADING_VERSION])"
    Restart-Service -Name $rke2ServiceName
}
